"""This module houses the various assumptions we made about the data.

Each assumption has a value that's used in computations and a description
which is rendered alongside the plots.
"""
from collections import namedtuple

Assumption = namedtuple("Assumption", "value description")

HOURLY_WAGE = Assumption(18, "Hourly wage set to {}â‚¬/hour")

# Make sure this stuff stays in sync!
COMPLEXITY_TYPES = Assumption(["Basic", "Easy", "Medium", "Complex"],
                              "These are the only complexity types considered:</br>{}")
PKG_PRICES = Assumption({
    "Basic": 100,
    "Easy": 180,
    "Medium": 360,
    "Complex": 680
}, "Price for a package by complexity type:</br>{}")
PLANNED_HOURS = Assumption({
    "Basic": 2,
    "Easy": 4,
    "Medium": 8,
    "Complex": 16
}, "How many hours we planned to take for a package (by complexity):</br>{}")

ASSUMPTIONS_TO_DISPLAY = [HOURLY_WAGE, COMPLEXITY_TYPES, PKG_PRICES, PLANNED_HOURS]

ASSUMPTION_TEXT = """
<h1>N.B.</h1>
<h2>Data Source</h2>
This data is refreshed by a monthly cronjob that scrapes a report generated by tt.revacom.com.
The scraper currently only infers the dates of the packages from the dates it requests the report for.
This is why individual data points are all clustered in vertical lines on the 1st of every month.
<h2>Assumptions</h2>
We made the following assumptions when generating these plots:
<ol>\n{}\n</ol>
"""


def _list_items(iterable):
    return map(lambda item: "<li>{}</li>".format(item), iterable)


def _iter_html_list(iterable) -> str:
    return "<ul>\n{}\n</ul>".format("\n".join(_list_items(iterable)))


def _prettyprint(assum: Assumption) -> str:
    val = assum.value
    if isinstance(val, dict):
        val_html = _iter_html_list("{0} : {1}".format(k, v) for k, v in val.items())
    elif isinstance(val, list):
        val_html = _iter_html_list(val)
    else:
        val_html = val
    return assum.description.format(val_html)


def assumption_html():
    """Produces an HTML list of all assumption descriptions."""
    # full_descriptions = [a.description.format(a.value) for a in ASSUMPTIONS_TO_DISPLAY]
    items = _list_items(map(_prettyprint, ASSUMPTIONS_TO_DISPLAY))
    return ASSUMPTION_TEXT.format("\n".join(items))
